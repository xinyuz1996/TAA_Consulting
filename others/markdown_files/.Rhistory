260/4
knitr::opts_chunk$set(echo = TRUE)
library(knitr) # kable
library(readr) # read_delim
library(dplyr) # manipulate data
library(Amelia) # missing value imputation
init_TAA_data<-read.delim("initial_data.txt")
init_TAA_data$X3_firmSize <- as.numeric(init_TAA_data$Q26_num) # Insure Q26_num is actually numeric
init_TAA_data$Q29_num<-as.numeric(as.character(init_TAA_data$Q29_num)) #Insure Q29_num is actually numeric
missmap(init_TAA_data)
# Delete observations with too much missing value
null_observations = c(1, 2, 5)
init_TAA_data = init_TAA_data[-null_observations,]
#Correct the Anamolous and Strange Data Mistake
prev=init_TAA_data[1,7:10]
init_TAA_data[1,7:10]=init_TAA_data[68,7:10]
for(i in 2:68){
temp=init_TAA_data[i,7:10]
init_TAA_data[i,7:10]=prev
prev=temp
}
removal_list<-c("Q42","Q43","Q44","Q45","Q6_score")
init_TAA_data<-init_TAA_data[, !(names(init_TAA_data) %in%removal_list)]
library(Gifi)
##Q5
#Set Aside Data for initiation
init_data_names<-c("Q5_1","Q5_2","Q5_3","Q5_4","Q5_5","Q5_6")
init_data<-init_TAA_data[init_data_names]
#Code Missing Values
init_data<-apply(init_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_init<-princals(init_data,ndim=1,missing = "a",degrees=2)
init_score<-pca_init$objectscores[,1]
##Q10
#Set Aside Data for routinization
rout_data_names<-c("Q10_1","Q10_2","Q10_3","Q10_4")
rout_data<-init_TAA_data[rout_data_names]
#Code Missing Values
rout_data<-apply(rout_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_rout<-princals(rout_data,ndim=1,missing = "a",degrees=2)
rout_score<-pca_rout$objectscores[,1]
##Q23
#Set Aside Data for routinization
integ_data_names<-c("Q23_1","Q23_2")
integ_data<-init_TAA_data[integ_data_names]
#Code Missing Values
integ_data<-apply(integ_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_integ<-princals(integ_data,ndim=1,missing = "a",degrees=2)
integ_score<-pca_integ$objectscores[,1]
##Q30
#Set Aside Data for management obstacles
manag_data_names<-c("Q30_1","Q30_2","Q30_3","Q30_4")
manag_data<-init_TAA_data[manag_data_names]
#Code Missing Values
manag_data<-apply(manag_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_manag<-princals(manag_data,ndim=1,missing = "a",degrees=2)
manag_score<-pca_manag$objectscores[,1]
##Q31
#Set Aside Data for management obstacles
comp_data_names<-c("Q31_1","Q31_2","Q31_3")
comp_data<-init_TAA_data[comp_data_names]
#Code Missing Values
comp_data<-apply(comp_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_comp<-princals(comp_data,ndim=1,missing = "a",degrees=2)
comp_score<-pca_comp$objectscores[,1]
##Q32
#Set Aside Data for Government Regulation
gov_data_names<-c("Q32_1","Q32_2","Q32_3","Q32_4")
gov_data<-init_TAA_data[gov_data_names]
#Code Missing Values
gov_data<-apply(gov_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_gov<-princals(gov_data,ndim=1,missing = "a",degrees=2)
gov_score<-pca_gov$objectscores[,1]
#Add Nonlinear PCA Scores to data
init_TAA_data$init_composite<-init_score
init_TAA_data$rout_composite<-rout_score
init_TAA_data$integrate_composite<-integ_score
init_TAA_data$manag_composite<-manag_score
init_TAA_data$comp_composite<-comp_score
init_TAA_data$gov_composite<-gov_score
str(init_TAA_data)
#Create Loadings Plots
par(mfrow=c(2,3))
barplot(pca_init$loadings[,1],main="Initiation Composite")
barplot(pca_rout$loadings[,1],main="Routinization Composite")
barplot(pca_integ$loadings[,1],main="Tech Integration Composite")
barplot(pca_manag$loadings[,1],main="Management Obstacles Composite")
barplot(pca_comp$loadings[,1],main="Competition Composite")
barplot(pca_gov$loadings[,1],main="Regulatory Environment Composite")
#Remove Original Likert Scale Data
removal_list<-c("Q5_1","Q5_2","Q5_3","Q5_4","Q5_5","Q5_6","Q10_1","Q10_2","Q10_3","Q10_4","Q23_1","Q23_2","Q30_1","Q30_2","Q30_3","Q30_4","Q31_1","Q31_2","Q31_3","Q32_1","Q32_2","Q32_3","Q32_4")
init_TAA_data<-init_TAA_data[, !(names(init_TAA_data) %in%removal_list)]
#Transform 4's
init_TAA_data[2,9]=3
init_TAA_data[16,7]=1
#Form Adoption Score
adopt_data<-init_TAA_data[c("Q6box_1","Q6box_2","Q6box_3")]
adopt_comp<-apply(adopt_data,1,sum,na.rm=TRUE)/6
init_TAA_data$adoption_score<-adopt_comp
init_TAA_data$adoption_score<-scale(init_TAA_data$adoption_score)
#Technology Readiness/Capability Score
TAA_capability_data<-init_TAA_data[c("Q22_box1","Q22_box2","Q22_box3","Q22_box4","Q22_box5","Q22_box6","Q22_box7","Q22_box8","Q22_box9", "Q22_box10")]
TAA_capability_score<-rep(0,nrow(TAA_capability_data))
max_score=1+2*4+3+4+5*2
for(i in 1:length(TAA_capability_score)){
score=0
if(!is.na(TAA_capability_data[i,1])){
score=score+0
}
if(!is.na(TAA_capability_data[i,2])){
score=score+1
}
if(!is.na(TAA_capability_data[i,3])){
score=score+2
}
if(!is.na(TAA_capability_data[i,4])){
score=score+2
}
if(!is.na(TAA_capability_data[i,5])){
score=score+2
}
if(!is.na(TAA_capability_data[i,6])){
score=score+3
}
if(!is.na(TAA_capability_data[i,7])){
score=score+4
}
if(!is.na(TAA_capability_data[i,8])){
score=score+5
}
if(!is.na(TAA_capability_data[i,9])){
score=score+5
}
if(!is.na(TAA_capability_data[i,10])){
score=score+2
}
TAA_capability_score[i]=score/max_score
}
init_TAA_data$TAA_capability<-TAA_capability_score
init_TAA_data$TAA_capability<-scale(init_TAA_data$TAA_capability)
dom_int_data<-init_TAA_data[c("Q24_box1","Q24_box2","Q24_box3","Q24_box4")]
dom_int<-ifelse(is.na(dom_int_data[,4]),0,1) #Create binary variable
init_TAA_data$Domestic_International<-dom_int
NA_index=apply(is.na(init_TAA_data[c("Q24_box1","Q24_box2","Q24_box3","Q24_box4")]),1,all) #Determine which values are missing
init_TAA_data$Domestic_International[NA_index] = NA #Assign missingness pattern
# names(init_TAA_data)
TAA_data <- init_TAA_data[,c(32:41)]
oldnames <- names(TAA_data)
newnames <- c("X3_firmSize" , "Y1_initialization", "Y3_routinization", "X2_integration", "X5_manag", "X6_compete", "X7_gov", "Y2_adoption", "X1_readiness", "X4_global" )
names(TAA_data) <- newnames
str(TAA_data)
missmap(TAA_data)
boxplot(TAA_data$X3_firmSize, main="Boxplot for X3_firmSize", horizontal=T)
m = 5 # number of simulated datsets to create # See definition of m in ?amelia()
TAA_data_amelia <- amelia(x = TAA_data, logs="X3_firmSize", noms="X4_global", m = m)
str(TAA_data_amelia$imputations$imp1)
TAA_data_impute <- TAA_data
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
for( col in col_index){
temp=numeric()
for (i in 1:m){
temp = cbind(temp, TAA_data_amelia$imputations[[i]][,col])
}
TAA_data_impute[,col] = apply(temp, 1, mean)
}
missmap(TAA_data_impute)
str(TAA_data_impute)
TAA_data_scale = scale(TAA_data_impute)
newnames
oldnames
rbind(oldnames, newnames)
str(TAA_data)
summary(TAA_data_impute)
plot(TAA_data_impute)
summary(TAA_data_impute)
setwd("F:/zxy/Project/TAA/TAA_Consulting/markdown_files")
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
plot(data_amelia)
summary(TAA_data_impute)
plot(TAA_data_amelia)
compare.density(data_amelia, var="X3_firmSize")
compare.density(TAA_data_amelia, var="X3_firmSize")
m = 5 # number of simulated datsets to create # See definition of m in ?amelia()
TAA_data_amelia <- amelia(x = TAA_data,  noms="X4_global", m = m) #logs="X3_firmSize",
TAA_data_amelia <- amelia(x = TAA_data,  noms="X4_global", m = m) #logs="X3_firmSize",
str(TAA_data_amelia$imputations$imp1)
str(TAA_data_amelia$imputations$imp1)
TAA_data_impute <- TAA_data
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
for( col in col_index){
temp=numeric()
for (i in 1:m){
temp = cbind(temp, TAA_data_amelia$imputations[[i]][,col])
}
TAA_data_impute[,col] = apply(temp, 1, mean)
}
missmap(TAA_data_impute)
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
plot(TAA_data_amelia)
compare.density(TAA_data_amelia, var="X3_firmSize")
boxplot( data_imput$X4_global )
boxplot( TAA_data_amelia$X4_global )
boxplot( TAA_data_impute$X4_global )
boxplot(TAA_data$X4_global )
boxplot(TAA_data_impute$X4_global )
X4_global
TAA_data$X4_global
boxplot(as.factor(TAA_data$X4_global),main="Boxplot of X4_global size")
?boxplot()
boxplot((TAA_data$X4_global),main="Boxplot of X4_global size")
hist((TAA_data$X4_global),main="Boxplot of X4_global size")
histlot(TAA_data_impute$X4_global )
hist(TAA_data_impute$X4_global )
TAA_data$X4_global <- as.factor(TAA_data$X4_global)
TAA_data$X4_global <- as.factor(TAA_data$X4_global)
str(TAA_data)
missmap(TAA_data)
missmap(TAA_data)
boxplot(TAA_data$X3_firmSize, main="Boxplot for X3_firmSize", horizontal=T)
m = 5 # number of simulated datsets to create # See definition of m in ?amelia()
TAA_data_amelia <- amelia(x = TAA_data,  noms="X4_global", m = m) #logs="X3_firmSize",
str(TAA_data_amelia$imputations$imp1)
TAA_data_impute <- TAA_data
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
for( col in col_index){
temp=numeric()
for (i in 1:m){
temp = cbind(temp, TAA_data_amelia$imputations[[i]][,col])
}
TAA_data_impute[,col] = apply(temp, 1, mean)
}
m = 5 # number of simulated datsets to create # See definition of m in ?amelia()
TAA_data_amelia <- amelia(x = TAA_data, logs="X3_firmSize", noms="X4_global", m = m) #
str(TAA_data_amelia$imputations$imp1)
TAA_data_impute <- TAA_data
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
for( col in col_index){
temp=numeric()
for (i in 1:m){
temp = cbind(temp, TAA_data_amelia$imputations[[i]][,col])
}
TAA_data_impute[,col] = apply(temp, 1, mean)
}
missmap(TAA_data_impute)
summary(TAA_data_impute)
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
# plot(TAA_data_amelia)
hist((TAA_data$X4_global),main="Boxplot of X4_global size")
hist(as.numeric(TAA_data$X4_global),main="Boxplot of X4_global size")
table((TAA_data$X4_global),main="Boxplot of X4_global size")
table(TAA_data$X4_global)
table(TAA_data_impute$X4_global )
TAA_data_impute$X4_global
str(TAA_data)
?amelia()
m = 5 # number of simulated datsets to create # See definition of m in ?amelia()
TAA_data_amelia <- amelia(x = TAA_data, logs="X3_firmSize",  m = m) # noms="X4_global",
str(TAA_data_amelia$imputations$imp1)
TAA_data_impute <- TAA_data
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
for( col in col_index){
temp=numeric()
for (i in 1:m){
temp = cbind(temp, TAA_data_amelia$imputations[[i]][,col])
}
TAA_data_impute[,col] = apply(temp, 1, mean)
}
summary(TAA_data_impute)
TAA_data_impute$X4_global <- round(TAA_data_impute$X4_global)
TAA_data_amelia <- amelia(x = TAA_data, logs="X3_firmSize", noms="X4_global", m = m) #
TAA_data_amelia <- amelia(x = TAA_data, logs="X3_firmSize", noms="X4_global", m = m) #
str(TAA_data_amelia$imputations$imp1)
TAA_data_amelia <- amelia(x = TAA_data, logs="X3_firmSize", noms="X4_global", m = m) #
str(TAA_data_amelia$imputations$imp1)
TAA_data_impute <- TAA_data
TAA_data_impute <- TAA_data
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
for( col in col_index){
temp=numeric()
for (i in 1:m){
temp = cbind(temp, TAA_data_amelia$imputations[[i]][,col])
}
TAA_data_impute[,col] = apply(temp, 1, mean)
}
TAA_data_impute$X4_global <- round((TAA_data_impute$X4_global))
missmap(TAA_data_impute)
summary(TAA_data_impute)
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
table(TAA_data$X4_global)
table(TAA_data_impute$X4_global )
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
compare.density(TAA_data_amelia, var="X3_firmSize")
table(TAA_data$X4_global)
table(TAA_data_impute$X4_global )
TAA_data$X4_global
?table()
table(as.character(TAA_data$X4_global))
table(as.character(TAA_data$X4_global), useNA = "ifany")
table(TAA_data_impute$X4_global )
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
compare.density(TAA_data_amelia, var="X3_firmSize")
r1 <- table(as.character(TAA_data$X4_global), useNA = "ifany")
r2 <- table(TAA_data_impute$X4_global )
X4_orig <- table(as.character(TAA_data$X4_global), useNA = "ifany")
X4_impute <- table(TAA_data_impute$X4_global )
rbind(X4_orig, X4_impute )
knitr::opts_chunk$set(echo = TRUE)
library(knitr) # kable
library(readr) # read_delim
library(dplyr) # manipulate data
library(Amelia) # missing value imputation
init_TAA_data<-read.delim("initial_data.txt")
init_TAA_data$X3_firmSize <- as.numeric(init_TAA_data$Q26_num) # Insure Q26_num is actually numeric
init_TAA_data$Q29_num<-as.numeric(as.character(init_TAA_data$Q29_num)) #Insure Q29_num is actually numeric
missmap(init_TAA_data)
## TODO!!!
# # Delete observations with too much missing value
# null_observations = c(1, 2, 5)
# init_TAA_data = init_TAA_data[-null_observations,]
#Correct the Anamolous and Strange Data Mistake
prev=init_TAA_data[1,7:10]
init_TAA_data[1,7:10]=init_TAA_data[68,7:10]
for(i in 2:68){
temp=init_TAA_data[i,7:10]
init_TAA_data[i,7:10]=prev
prev=temp
}
removal_list<-c("Q42","Q43","Q44","Q45","Q6_score")
init_TAA_data<-init_TAA_data[, !(names(init_TAA_data) %in%removal_list)]
library(Gifi)
##Q5
#Set Aside Data for initiation
init_data_names<-c("Q5_1","Q5_2","Q5_3","Q5_4","Q5_5","Q5_6")
init_data<-init_TAA_data[init_data_names]
#Code Missing Values
init_data<-apply(init_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_init<-princals(init_data,ndim=1,missing = "a",degrees=2)
init_score<-pca_init$objectscores[,1]
##Q10
#Set Aside Data for routinization
rout_data_names<-c("Q10_1","Q10_2","Q10_3","Q10_4")
rout_data<-init_TAA_data[rout_data_names]
#Code Missing Values
rout_data<-apply(rout_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_rout<-princals(rout_data,ndim=1,missing = "a",degrees=2)
rout_score<-pca_rout$objectscores[,1]
##Q23
#Set Aside Data for routinization
integ_data_names<-c("Q23_1","Q23_2")
integ_data<-init_TAA_data[integ_data_names]
#Code Missing Values
integ_data<-apply(integ_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_integ<-princals(integ_data,ndim=1,missing = "a",degrees=2)
integ_score<-pca_integ$objectscores[,1]
##Q30
#Set Aside Data for management obstacles
manag_data_names<-c("Q30_1","Q30_2","Q30_3","Q30_4")
manag_data<-init_TAA_data[manag_data_names]
#Code Missing Values
manag_data<-apply(manag_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_manag<-princals(manag_data,ndim=1,missing = "a",degrees=2)
manag_score<-pca_manag$objectscores[,1]
##Q31
#Set Aside Data for management obstacles
comp_data_names<-c("Q31_1","Q31_2","Q31_3")
comp_data<-init_TAA_data[comp_data_names]
#Code Missing Values
comp_data<-apply(comp_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_comp<-princals(comp_data,ndim=1,missing = "a",degrees=2)
comp_score<-pca_comp$objectscores[,1]
##Q32
#Set Aside Data for Government Regulation
gov_data_names<-c("Q32_1","Q32_2","Q32_3","Q32_4")
gov_data<-init_TAA_data[gov_data_names]
#Code Missing Values
gov_data<-apply(gov_data,2,function(x){ifelse(x==6,NA,x)})
#Impute, transform, do PCA
pca_gov<-princals(gov_data,ndim=1,missing = "a",degrees=2)
gov_score<-pca_gov$objectscores[,1]
#Add Nonlinear PCA Scores to data
init_TAA_data$init_composite<-init_score
init_TAA_data$rout_composite<-rout_score
init_TAA_data$integrate_composite<-integ_score
init_TAA_data$manag_composite<-manag_score
init_TAA_data$comp_composite<-comp_score
init_TAA_data$gov_composite<-gov_score
str(init_TAA_data)
#Create Loadings Plots
par(mfrow=c(2,3))
barplot(pca_init$loadings[,1],main="Initiation Composite")
barplot(pca_rout$loadings[,1],main="Routinization Composite")
barplot(pca_integ$loadings[,1],main="Tech Integration Composite")
barplot(pca_manag$loadings[,1],main="Management Obstacles Composite")
barplot(pca_comp$loadings[,1],main="Competition Composite")
barplot(pca_gov$loadings[,1],main="Regulatory Environment Composite")
#Remove Original Likert Scale Data
removal_list<-c("Q5_1","Q5_2","Q5_3","Q5_4","Q5_5","Q5_6","Q10_1","Q10_2","Q10_3","Q10_4","Q23_1","Q23_2","Q30_1","Q30_2","Q30_3","Q30_4","Q31_1","Q31_2","Q31_3","Q32_1","Q32_2","Q32_3","Q32_4")
init_TAA_data<-init_TAA_data[, !(names(init_TAA_data) %in%removal_list)]
#Transform 4's
init_TAA_data[2,9]=3
init_TAA_data[16,7]=1
#Form Adoption Score
adopt_data<-init_TAA_data[c("Q6box_1","Q6box_2","Q6box_3")]
adopt_comp<-apply(adopt_data,1,sum,na.rm=TRUE)/6
init_TAA_data$adoption_score<-adopt_comp
init_TAA_data$adoption_score<-scale(init_TAA_data$adoption_score)
#Technology Readiness/Capability Score
TAA_capability_data<-init_TAA_data[c("Q22_box1","Q22_box2","Q22_box3","Q22_box4","Q22_box5","Q22_box6","Q22_box7","Q22_box8","Q22_box9", "Q22_box10")]
TAA_capability_score<-rep(0,nrow(TAA_capability_data))
max_score=1+2*4+3+4+5*2
for(i in 1:length(TAA_capability_score)){
score=0
if(!is.na(TAA_capability_data[i,1])){
score=score+0
}
if(!is.na(TAA_capability_data[i,2])){
score=score+1
}
if(!is.na(TAA_capability_data[i,3])){
score=score+2
}
if(!is.na(TAA_capability_data[i,4])){
score=score+2
}
if(!is.na(TAA_capability_data[i,5])){
score=score+2
}
if(!is.na(TAA_capability_data[i,6])){
score=score+3
}
if(!is.na(TAA_capability_data[i,7])){
score=score+4
}
if(!is.na(TAA_capability_data[i,8])){
score=score+5
}
if(!is.na(TAA_capability_data[i,9])){
score=score+5
}
if(!is.na(TAA_capability_data[i,10])){
score=score+2
}
TAA_capability_score[i]=score/max_score
}
init_TAA_data$TAA_capability<-TAA_capability_score
init_TAA_data$TAA_capability<-scale(init_TAA_data$TAA_capability)
dom_int_data<-init_TAA_data[c("Q24_box1","Q24_box2","Q24_box3","Q24_box4")]
dom_int<-ifelse(is.na(dom_int_data[,4]),0,1) #Create binary variable
init_TAA_data$Domestic_International<-dom_int
NA_index=apply(is.na(init_TAA_data[c("Q24_box1","Q24_box2","Q24_box3","Q24_box4")]),1,all) #Determine which values are missing
init_TAA_data$Domestic_International[NA_index] = NA #Assign missingness pattern
# names(init_TAA_data)
TAA_data <- init_TAA_data[-c(1, 2, 5), c(32:41)]
oldnames <- names(TAA_data)
newnames <- c("X3_firmSize" , "Y1_initialization", "Y3_routinization", "X2_integration", "X5_manag", "X6_compete", "X7_gov", "Y2_adoption", "X1_readiness", "X4_global" )
names(TAA_data) <- newnames
rbind(oldnames, newnames)
TAA_data$X4_global <- as.factor(TAA_data$X4_global)
str(TAA_data)
missmap(TAA_data)
boxplot(TAA_data$X3_firmSize, main="Boxplot for X3_firmSize", horizontal=T)
m = 5 # number of simulated datsets to create # See definition of m in ?amelia()
TAA_data_amelia <- amelia(x = TAA_data, logs="X3_firmSize", noms="X4_global", m = m) #
str(TAA_data_amelia$imputations$imp1)
TAA_data_impute <- TAA_data
# Average the imputations between different simulated datasets
col_index = which(names(TAA_data_amelia$imputations$imp1) %in% c("X3_firmSize", "X4_global"))
for( col in col_index){
temp=numeric()
for (i in 1:m){
temp = cbind(temp, TAA_data_amelia$imputations[[i]][,col])
}
TAA_data_impute[,col] = apply(temp, 1, mean)
}
TAA_data_impute$X4_global <- round((TAA_data_impute$X4_global))
missmap(TAA_data_impute)
summary(TAA_data_impute)
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
X4_orig <- table(as.character(TAA_data$X4_global), useNA = "ifany")
X4_impute <- table(TAA_data_impute$X4_global )
rbind(X4_orig, X4_impute )
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
compare.density(TAA_data_amelia, var="X3_firmSize")
table(TAA_data_impute$X4_global )
rbind(X4_orig, X4_impute )
X4_impute <- c(table(TAA_data_impute$X4_global), 0)
rbind(X4_orig, X4_impute )
par(mfrow=c(2,1), mar=c(2, 3, 2, 3))
compare.density(TAA_data_amelia, var="X3_firmSize")
# 1. log transformation of firmSize
TAA_data_impute$X3_firmSize <- log(TAA_data_impute$X3_firmSize)
# 2. scale of data
TAA_data_scale = scale(TAA_data_impute)
str(TAA_data_scale)
